# x86 Demo Board

BIOS works in Real-Mode, int 13h service can't load image to 1MB address, so I need a disk driver do this.

The free memory in Real-Mode is from 0x500 to 0x9000, see layout.png, consider 0x7c00~ 0x8000 is used for compatible.

We can use 0x1000~0x9000, first load the OS start sector to 0x1000. then OS start sector continue load and override the bootsector. OS start sector enter protected mode. If has disk driver to load OS to 1MB address, if the OS located in a file system based disk, the code should also support FS.

To make it easy, we don't import FS, we can get the image disk size by driver, then load the retained content to 1MB start address.

We need img disk which can fill 0x1000~0x9000, so the size is 0x8000 (32KB). Image disk's size increases if there is an OS, total image size should be multiple of 512 bytes. The retained area can be initialized as a FATFS or EXT4.

## Memory Layout

    ------------------- 0xFFFF,FFFF
    ...
    OS Protected Code
    ------------------- 0x0010,0000 (1MB)
    ...
    IO
    ...
    BIOS Extended
    ...
    ------------------- 0x9000
    Stack
    ...
    OS Real-Mode Code
    ------------------- 31.5KB
    Boot Sector
    ------------------- 31KB 0x7C00
    OS Real-Mode Code
    -------------------  4KB 0x1000
    ...
    BIOS
    ...
    ------------------- 0KB

## Reference

* https://linux.cn/article-2926-1.html
* https://stackoverflow.com/questions/4821911/does-grub-switch-to-protected-mode
* https://stackoverflow.com/questions/9158826/grub-run-in-which-mode
* http://lxr.linux.no/#linux+v2.6.25.6/Documentation/i386/boot.txt

